import React, { useState, useEffect, useCallback } from 'react';
import {
    View,
    Text,
    StyleSheet,
    ScrollView,
    TouchableOpacity,
    ActivityIndicator,
    Alert,
    FlatList,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import dayjs from 'dayjs';
import { useNetInfo } from '@react-native-community/netinfo';

import { useRealm, useQuery } from '../config/realmConfig';
import BackgroundContainer from '../components/BackgroundContainer';
import BookingCard from '../components/BookingCard';
import { useNotification } from '../context/NotificationContext';
import { useAuth } from '../context/AuthContext';
import api from '../utils/api';
import { theme } from '../styles/theme';
import Realm from "realm";

const StatCard = ({ icon, label, value, color, onPress, fullWidth }) => (
    <TouchableOpacity style={[styles.statCard, fullWidth && styles.fullWidthStatCard]} onPress={onPress}>
        <View style={[styles.iconContainer, { backgroundColor: color }]}>
            <Ionicons name={icon} size={24} color={theme.COLORS.textLight} />
        </View>
        <View>
            <Text style={styles.statValue}>{value}</Text>
            <Text style={styles.statLabel}>{label}</Text>
        </View>
    </TouchableOpacity>
);

const QuickActionButton = ({ icon, label, onPress }) => (
    <TouchableOpacity style={styles.quickActionButton} onPress={onPress}>
        <Ionicons name={icon} size={28} color={theme.COLORS.primary} />
        <Text style={styles.quickActionLabel}>{label}</Text>
    </TouchableOpacity>
);

const DashboardScreen = ({ navigation }) => {
    const { user } = useAuth();
    const realm = useRealm();
    const dashboardStats = useQuery('DashboardStats');
    const allBookings = useQuery('Booking'); // Query all bookings from Realm
    const [loading, setLoading] = useState(true);
    const { showNotification } = useNotification();
    const netInfo = useNetInfo(); // Get network info

    const stats = dashboardStats[0] || {
        totalBookings: 0,
        pendingBookings: 0,
        totalClients: 0,
        totalRevenue: 0,
    };

    // Filter pending bookings from Realm
    const pendingBookingsRealm = allBookings.filtered('status == "Pending"').sorted('bookingDate', true);

    const syncLocalChanges = useCallback(async () => {
        const pendingLocalBookings = allBookings.filtered('syncStatus == "pending"');
        for (let booking of pendingLocalBookings) {
            try {
                // Prepare booking data for API (remove Realm-specific properties)
                const bookingData = {
                    ...booking.toJSON(),
                    _id: booking._id.toHexString(),
                    client: booking.client._id.toHexString(),
                    bookingDate: booking.bookingDate.toISOString(),
                    deliveryDate: booking.deliveryDate ? booking.deliveryDate.toISOString() : undefined,
                    reminderDate: booking.reminderDate ? booking.reminderDate.toISOString() : undefined,
                };
                delete bookingData.syncStatus;

                if (bookingData._id) { // Assuming _id exists for updates
                    await api.put(`/bookings/${bookingData._id}`, bookingData);
                } else { // For new bookings, _id might be generated by Realm, but server needs to create it
                    // This case needs careful handling: if _id is generated by Realm, it's a local-only ID.
                    // The server will generate its own _id. We need to update the local Realm object with the server's _id.
                    // For now, assuming _id exists for updates and new bookings are handled elsewhere (e.g., AddBookingScreen)
                    // If new bookings are created offline and need to be synced here, a more robust ID management is needed.
                    // For simplicity, this sync focuses on updates/deletions of existing server-side bookings.
                }

                realm.write(() => {
                    booking.syncStatus = 'synced';
                });
            } catch (err) {
                showNotification(`Failed to sync booking ${booking._id.toHexString()}: ${err.response?.data?.msg || err.message}`, 'error');
                // Optionally, mark syncStatus as 'error' to retry later
            }
        }
    }, [realm, allBookings, showNotification]);

    const fetchData = useCallback(async () => {
        setLoading(false); // Immediately set loading to false to display cached data

        if (netInfo.isConnected) {
            await syncLocalChanges(); // Sync local changes before fetching new data

            try {
                const { data } = await api.get('/auth/dashboard-stats');
                const apiBookingIds = new Set(data.recentBookings.map(b => b._id));

                realm.write(() => {
                    realm.create('DashboardStats', {
                        _id: 'main',
                        totalClients: data.totalClients || 0,
                        totalBookings: data.totalBookings || 0,
                        pendingBookings: data.pendingBookings || 0,
                        completedBookings: data.completedBookings || 0,
                        totalRevenue: data.totalRevenue || 0,
                        totalOutstanding: data.totalOutstanding || 0,
                        updatedAt: new Date(),
                    }, Realm.UpdateMode.Modified);

                    // Delete bookings that are no longer on the server
                    allBookings.forEach(localBooking => {
                        if (!apiBookingIds.has(localBooking._id.toHexString()) && localBooking.syncStatus !== 'pending') {
                            realm.delete(localBooking);
                        }
                    });

                    // Update or create local bookings with data from API
                    data.recentBookings.forEach(apiBooking => {
                        // Ensure client exists in Realm or create/update it first
                        let clientRealmObject = realm.objectForPrimaryKey('Client', new Realm.BSON.ObjectId(apiBooking.client._id));

                        if (!clientRealmObject) {
                            clientRealmObject = realm.create('Client', {
                                _id: new Realm.BSON.ObjectId(apiBooking.client._id),
                                name: apiBooking.client.name,
                                email: apiBooking.client.email || null,
                                phone: apiBooking.client.phone,
                                address: apiBooking.client.address || null,
                                notes: apiBooking.client.notes || null,
                                createdBy: new Realm.BSON.ObjectId(apiBooking.client.createdBy),
                                measurement: apiBooking.client.measurement ? (() => {
                                    const sanitizedMeasurement = {
                                        chest: Array.isArray(apiBooking.client.measurement.chest) ? apiBooking.client.measurement.chest.map(val => {
                                            const parsedVal = parseInt(val);
                                            if (isNaN(parsedVal)) { return 0; }
                                            return parsedVal;
                                        }) : [0, 0],
                                        waist: (() => {
                                            const parsedVal = parseInt(apiBooking.client.measurement.waist);
                                            if (isNaN(parsedVal)) { return 0; }
                                            return parsedVal;
                                        })(),
                                        roundsleeve: Array.isArray(apiBooking.client.measurement.roundsleeve) ? apiBooking.client.measurement.roundsleeve.map(val => {
                                            const parsedVal = parseInt(val);
                                            if (isNaN(parsedVal)) { return 0; }
                                            return parsedVal;
                                        }) : [0, 0, 0],
                                        shoulder: (() => {
                                            const parsedVal = parseInt(apiBooking.client.measurement.shoulder);
                                            if (isNaN(parsedVal)) { return 0; }
                                            return parsedVal;
                                        })(),
                                        toplength: (() => {
                                            const parsedVal = parseInt(apiBooking.client.measurement.toplength);
                                            if (isNaN(parsedVal)) { return 0; }
                                            return parsedVal;
                                        })(),
                                        trouserlength: (() => {
                                            const parsedVal = parseInt(apiBooking.client.measurement.trouserlength);
                                            if (isNaN(parsedVal)) { return 0; }
                                            return parsedVal;
                                        })(),
                                        thigh: (() => {
                                            const parsedVal = parseInt(apiBooking.client.measurement.thigh);
                                            if (isNaN(parsedVal)) { return 0; }
                                            return parsedVal;
                                        })(),
                                        knee: (() => {
                                            const parsedVal = parseInt(apiBooking.client.measurement.knee);
                                            if (isNaN(parsedVal)) { return 0; }
                                            return parsedVal;
                                        })(),
                                        ankle: (() => {
                                            const parsedVal = parseInt(apiBooking.client.measurement.ankle);
                                            if (isNaN(parsedVal)) { return 0; }
                                            return parsedVal;
                                        })(),
                                        neck: (() => {
                                            const parsedVal = parseInt(apiBooking.client.measurement.neck);
                                            if (isNaN(parsedVal)) { return 0; }
                                            return parsedVal;
                                        })(),
                                        sleeveLength: Array.isArray(apiBooking.client.measurement.sleeveLength) ? apiBooking.client.measurement.sleeveLength.map(val => {
                                            const parsedVal = parseInt(val);
                                            if (isNaN(parsedVal)) { return 0; }
                                            return parsedVal;
                                        }) : [0, 0, 0],
                                    };
                                    return sanitizedMeasurement;
                                })() : {},
                                createdAt: new Date(apiBooking.client.createdAt),
                                updatedAt: new Date(apiBooking.client.updatedAt),
                            });
                        } else {
                            // Update existing client properties if necessary
                            if (apiBooking.client.name !== undefined) clientRealmObject.name = apiBooking.client.name;
                            if (apiBooking.client.email !== undefined) clientRealmObject.email = (apiBooking.client.email === null) ? null : apiBooking.client.email;
                            if (apiBooking.client.phone !== undefined) clientRealmObject.phone = apiBooking.client.phone;
                            if (apiBooking.client.address !== undefined) clientRealmObject.address = (apiBooking.client.address === undefined || apiBooking.client.address === null) ? null : apiBooking.client.address;
                            if (apiBooking.client.notes !== undefined) clientRealmObject.notes = (apiBooking.client.notes === undefined || apiBooking.client.notes === null) ? null : apiBooking.client.notes;
                            if (apiBooking.client.createdBy !== undefined) clientRealmObject.createdBy = new Realm.BSON.ObjectId(apiBooking.client.createdBy);
                            
                            clientRealmObject.measurement = apiBooking.client.measurement ? (() => {
                                const sanitizedMeasurement = {
                                    chest: Array.isArray(apiBooking.client.measurement.chest) ? apiBooking.client.measurement.chest.map(val => {
                                        const parsedVal = parseInt(val);
                                        if (isNaN(parsedVal)) { return 0; }
                                        return parsedVal;
                                    }) : [0, 0],
                                    waist: (() => {
                                        const parsedVal = parseInt(apiBooking.client.measurement.waist);
                                        if (isNaN(parsedVal)) { return 0; }
                                        return parsedVal;
                                    })(),
                                    roundsleeve: Array.isArray(apiBooking.client.measurement.roundsleeve) ? apiBooking.client.measurement.roundsleeve.map(val => {
                                        const parsedVal = parseInt(val);
                                        if (isNaN(parsedVal)) { return 0; }
                                        return parsedVal;
                                    }) : [0, 0, 0],
                                    shoulder: (() => {
                                        const parsedVal = parseInt(apiBooking.client.measurement.shoulder);
                                        if (isNaN(parsedVal)) { return 0; }
                                        return parsedVal;
                                    })(),
                                    toplength: (() => {
                                        const parsedVal = parseInt(apiBooking.client.measurement.toplength);
                                        if (isNaN(parsedVal)) { return 0; }
                                        return parsedVal;
                                    })(),
                                    trouserlength: (() => {
                                        const parsedVal = parseInt(apiBooking.client.measurement.trouserlength);
                                        if (isNaN(parsedVal)) { return 0; }
                                        return parsedVal;
                                    })(),
                                    thigh: (() => {
                                        const parsedVal = parseInt(apiBooking.client.measurement.thigh);
                                        if (isNaN(parsedVal)) { return 0; }
                                        return parsedVal;
                                    })(),
                                    knee: (() => {
                                        const parsedVal = parseInt(apiBooking.client.measurement.knee);
                                        if (isNaN(parsedVal)) { return 0; }
                                        return parsedVal;
                                    })(),
                                    ankle: (() => {
                                        const parsedVal = parseInt(apiBooking.client.measurement.ankle);
                                        if (isNaN(parsedVal)) { return 0; }
                                        return parsedVal;
                                    })(),
                                    neck: (() => {
                                        const parsedVal = parseInt(apiBooking.client.measurement.neck);
                                        if (isNaN(parsedVal)) { return 0; }
                                        return parsedVal;
                                    })(),
                                    sleeveLength: Array.isArray(apiBooking.client.measurement.sleeveLength) ? apiBooking.client.measurement.sleeveLength.map(val => {
                                        const parsedVal = parseInt(val);
                                        if (isNaN(parsedVal)) { return 0; }
                                        return parsedVal;
                                    }) : [0, 0, 0],
                                };
                                return sanitizedMeasurement;
                            })() : {};
                            if (apiBooking.client.updatedAt !== undefined) clientRealmObject.updatedAt = new Date(apiBooking.client.updatedAt);
                        }

                        const existingBooking = realm.objectForPrimaryKey('Booking', new Realm.BSON.ObjectId(apiBooking._id));
                        if (existingBooking) {
                            // Directly update properties to avoid primary key modification issues
                            existingBooking.client = clientRealmObject; // Assign the Realm client object
                            existingBooking.bookingDate = new Date(apiBooking.bookingDate);
                            existingBooking.deliveryDate = apiBooking.deliveryDate ? new Date(apiBooking.deliveryDate) : undefined;
                            existingBooking.reminderDate = apiBooking.reminderDate ? new Date(apiBooking.reminderDate) : undefined;
                            existingBooking.status = apiBooking.status;
                            existingBooking.notes = apiBooking.notes;
                            existingBooking.design = apiBooking.design;
                            existingBooking.price = apiBooking.price;
                            existingBooking.payment = apiBooking.payment;
                            existingBooking.updatedAt = new Date(apiBooking.updatedAt);
                            existingBooking.syncStatus = 'synced'; // Mark as synced after API fetch
                        } else {
                            realm.create('Booking', { 
                                ...apiBooking, 
                                _id: new Realm.BSON.ObjectId(apiBooking._id), 
                                client: clientRealmObject, // Assign the Realm client object
                                bookingDate: new Date(apiBooking.bookingDate),
                                deliveryDate: apiBooking.deliveryDate ? new Date(apiBooking.deliveryDate) : undefined,
                                reminderDate: apiBooking.reminderDate ? new Date(apiBooking.reminderDate) : undefined,
                                syncStatus: 'synced' // Mark as synced after API fetch
                            });
                        }
                    });
                });
                
            } catch (err) {
                const errorMessage = netInfo.isConnected ? (err.response?.data?.msg || 'Failed to fetch dashboard data.') : 'You are offline. Displaying cached data.';
                showNotification(errorMessage, 'error');
            }
        } else {
        }
    }, [realm, showNotification, netInfo.isConnected, allBookings, syncLocalChanges]);

    useEffect(() => {
        const unsubscribe = navigation.addListener('focus', fetchData);
        return unsubscribe;
    }, [navigation, fetchData]);

    // No longer need this useEffect as loading is set to false immediately
    // useEffect(() => {
    //     if (!loading && pendingBookingsRealm.length >= 0) { // Check if Realm data is loaded
    //         setLoading(false);
    //     }
    // }, [loading, pendingBookingsRealm]);

    const handleEditBooking = (booking) => {
        navigation.navigate('AddBooking', { booking: booking });
    };

    


    if (loading) {
        return (
            <View style={styles.loadingContainer}>
                <ActivityIndicator size="large" color={theme.COLORS.primary} />
            </View>
        );
    }

    return (
        <BackgroundContainer>
            <ScrollView contentContainerStyle={styles.content}>
                <View style={styles.header}>
                    <Text style={styles.headerGreeting}>Hello, {user?.name || 'User'}!</Text>
                    <Text style={styles.headerSlogan}>Your business at a glance.</Text>
                </View>

                <View style={styles.statsGrid}>
                    <StatCard icon="briefcase-outline" label="Total Bookings" value={stats.totalBookings} color="#4a90e2" onPress={() => navigation.navigate('Bookings')} />
                    <StatCard icon="time-outline" label="Pending" value={stats.pendingBookings} color="#f5a623" onPress={() => navigation.navigate('Bookings')} />
                    <StatCard icon="people-outline" label="Total Clients" value={stats.totalClients} color="#bd10e0" onPress={() => navigation.navigate('Clients')}  fullWidth={true}/>
                    <StatCard icon="cash-outline" label="Revenue" value={`₦${stats.totalRevenue.toFixed(2)}`} color="#7ed321" onPress={() => navigation.navigate('Financials')} fullWidth={true} />
                </View>

                <View style={styles.section}>
                    <Text style={styles.sectionTitle}>Quick Actions</Text>
                    <View style={styles.quickActionsGrid}>
                        <QuickActionButton icon="add-circle-outline" label="New Booking" onPress={() => navigation.navigate('AddBooking')} />
                        <QuickActionButton icon="person-add-outline" label="New Client" onPress={() => navigation.navigate('AddClient')} />
                        <QuickActionButton icon="receipt-outline" label="Add Expense" onPress={() => navigation.navigate('Financials', { openModal: true, type: 'expense' })} />
                        <QuickActionButton icon="cash-outline" label="Add Income" onPress={() => navigation.navigate('Financials', { openModal: true, type: 'income' })} />
                    </View>
                </View>

                <View style={styles.section}>
                    <Text style={styles.sectionTitle}>Recent Activity</Text>
                    {pendingBookingsRealm.length > 0 ? (
                        <FlatList
                            data={pendingBookingsRealm}
                            renderItem={({ item }) => (
                                <BookingCard
                                    booking={item}
                                    onView={() => navigation.navigate('BookingDetail', { bookingId: item._id })}
                                    onEdit={() => handleEditBooking(item)}
                                    onDelete={() =>
                                        Alert.alert(
                                            'Delete Booking',
                                            'Are you sure you want to delete this booking?',
                                            [
                                                {
                                                    text: 'Cancel',
                                                    style: 'cancel',
                                                },
                                                {
                                                    text: 'Delete',
                                                    style: 'destructive',
                                                    onPress: async () => {
                                                        try {
                                                            realm.write(() => {
                                                                realm.delete(item);
                                                            });
                                                            await api.delete(`/bookings/${item._id}`);
                                                            showNotification('Booking deleted successfully!', 'success');
                                                        } catch (err) {
                                                            showNotification(err.response?.data?.msg || 'Failed to delete booking.', 'error');
                                                        }
                                                    },
                                                },
                                            ],
                                        )
                                    }
                                    onComplete={() => {
                                        realm.write(() => {
                                            item.status = 'Completed';
                                            item.syncStatus = 'pending'; // Mark for sync
                                        });
                                        const updatedBooking = { ...item, status: 'Completed' };
                                        api.put(`/bookings/${item._id}`, updatedBooking)
                                            .then(() => {
                                                realm.write(() => {
                                                    item.syncStatus = 'synced';
                                                });
                                                showNotification('Booking marked as completed!', 'success');
                                            })
                                            .catch(err => {
                                                showNotification(err.response?.data?.msg || 'Failed to update booking status.', 'error');
                                            });
                                    }}
                                />
                            )}
                            keyExtractor={(item) => item._id.toHexString()}
                            scrollEnabled={false}
                        />
                    ) : (
                        <Text style={styles.emptyStateText}>No recent bookings to show.</Text>
                    )}
                </View>
            </ScrollView>
        </BackgroundContainer>
    );
};


const styles = StyleSheet.create({
    loadingContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: theme.COLORS.backgroundApp,
    },
    content: {
        paddingBottom: 10,
    },
    header: {
        backgroundColor: theme.COLORS.primary,
        paddingHorizontal: theme.SPACING.lg,
        paddingTop: theme.SPACING.sm,
        paddingBottom: theme.SPACING.xl,
        borderBottomLeftRadius: 30,
        borderBottomRightRadius: 30,
        alignItems: 'center',
        justifyContent: 'center',
        marginBottom: theme.SPACING.md,
    },
    headerGreeting: {
        fontSize: theme.FONT_SIZES.h1,
        fontWeight: 'bold',
        color: theme.COLORS.textLight,
    },
    headerSlogan: {
        fontSize: theme.FONT_SIZES.body,
        color: theme.COLORS.textLight,
        marginTop: theme.SPACING.xs,
    },
    statsGrid: {
        flexDirection: 'row',
        flexWrap: 'wrap',
        justifyContent: 'space-around',
        paddingHorizontal: theme.SPACING.sm,
        marginTop: -theme.SPACING.xxl, // Overlap header
        marginBottom: theme.SPACING.md,
    },
    statCard: {
        width: '45%', // Slightly smaller width
        backgroundColor: theme.COLORS.backgroundCard,
        borderRadius: theme.BORDERRADIUS.sm, // Smaller border radius
        padding: theme.SPACING.sm, // Reduced padding
        marginBottom: theme.SPACING.sm, // Reduced margin
        flexDirection: 'row',
        alignItems: 'center',
        elevation: 2, // Slightly less shadow
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 1 },
        shadowOpacity: 0.08,
        shadowRadius: 3,
        textAlign: 'left',
    },
    iconContainer: {
        width: 30, // Smaller icon container
        height: 30,
        borderRadius: 15,
        justifyContent: 'center',
        alignItems: 'center',
        marginRight: theme.SPACING.sm, // Reduced margin
    },
    statValue: {
        fontSize: theme.FONT_SIZES.body, // Smaller font size
        fontWeight: 'bold',
        color: theme.COLORS.textDark,
    },
    statLabel: {
        fontSize: theme.FONT_SIZES.xs, // Smaller font size
        color: theme.COLORS.textMedium,
    },
    fullWidthStatCard: {
        width: '95%', // Take full width with some horizontal padding
        marginBottom: theme.SPACING.md, // Ensure consistent spacing
    },
    section: {
        marginTop: theme.SPACING.xs,
        paddingHorizontal: theme.SPACING.md,
    },
    sectionTitle: {
        fontSize: theme.FONT_SIZES.h4, // Smaller title for quick actions
        fontWeight: 'bold',
        color: theme.COLORS.textLight,
        marginBottom: theme.SPACING.sm,
        textAlign: 'center',
    },
    quickActionsGrid: {
        flexDirection: 'row',
        justifyContent: 'space-around',
        backgroundColor: theme.COLORS.backgroundCard,
        borderRadius: theme.BORDERRADIUS.sm, // Smaller border radius
        paddingVertical: theme.SPACING.sm, // Reduced padding
        width: '100%',
        flexWrap: 'wrap',
        alignItems: 'center',
        marginBottom: theme.SPACING.md,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 1 },
        shadowOpacity: 0.08,
        shadowRadius: 3,
        elevation: 2,
        paddingHorizontal: theme.SPACING.xs, // Adjusted padding
        marginTop: theme.SPACING.sm,
    },
    quickActionButton: {
        alignItems: 'center',
        flex: 1,
        padding: theme.SPACING.xs, // Reduced padding
        marginHorizontal: theme.SPACING.xs, // Reduced margin
        backgroundColor: theme.COLORS.backgroundCard,
        borderRadius: theme.BORDERRADIUS.xs, // Even smaller border radius
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 1 },
        shadowOpacity: 0.05,
        shadowRadius: 2,
        elevation: 1,
        justifyContent: 'center',
        flexDirection: 'column',
        height: 80, // Smaller height
        maxWidth: '23%', // Adjust for 4 items per row, with some spacing
        minWidth: 70, // Minimum width to prevent squishing
        paddingVertical: theme.SPACING.xs,
        marginBottom: theme.SPACING.sm,
    },
    quickActionLabel: {
        marginTop: theme.SPACING.xs,
        fontSize: theme.FONT_SIZES.xs, // Smaller font size
        color: theme.COLORS.primary,
        fontWeight: '600',
        textAlign: 'center',
    },
    emptyStateText: {
        textAlign: 'center',
        color: theme.COLORS.textMedium,
        padding: theme.SPACING.lg,
    },
});

export default DashboardScreen;
